<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TailSpark - About Us</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      body {
        background: #0f172a;
        color: white;
      }

      .team-card {
        width: 120px;
        height: 120px;
        background: #1e293b;
        border-radius: 1rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        transition: transform 0.3s ease;
        box-shadow: 0 6px 14px rgba(0, 0, 0, 0.4);
      }

      .drop-card {
        position: absolute;
        width: 120px;
        height: 120px;
        background: #1e293b;
        border-radius: 1rem;
        box-shadow: 0 6px 14px rgba(0, 0, 0, 0.4);
        opacity: 0;
        overflow: hidden;
        transform: translateY(-50px) scale(0.8);
        transition: all 0.5s ease;
      }

      .drop-card.show {
        animation: dropAnim 0.9s cubic-bezier(0.22, 0.68, 0, 1.71) forwards;
      }

      .drop-card.expanded {
        width: 280px;
        height: 180px;
        border-radius: 1rem;
      }

      @keyframes dropAnim {
        0% {
          transform: translateY(-80px) scale(0.8);
          opacity: 0;
        }
        50% {
          transform: translateY(15px) scale(0.9);
          opacity: 1;
        }
        70% {
          transform: translateY(-5px) scale(1.02);
        }
        100% {
          transform: translateY(0) scale(1);
          opacity: 1;
        }
      }

      .connection-line {
        stroke: #94a3b8;
        stroke-width: 3;
        stroke-dasharray: 5, 8;
        fill: none;
        opacity: 0;
      }

      .connection-line.show {
        animation: drawLine 0.6s linear forwards;
      }

      @keyframes drawLine {
        from {
          stroke-dashoffset: 200;
          opacity: 1;
        }
        to {
          stroke-dashoffset: 0;
          opacity: 1;
        }
      }
    </style>
  </head>
  <body>
    <!-- NAVBAR -->
    <header class="bg-slate-900 sticky top-0 z-50">
      <div
        class="container mx-auto flex items-center justify-between py-4 px-6"
      >
        <a href="#" class="text-2xl font-bold text-indigo-400">TailSpark</a>
        <nav class="space-x-6 hidden md:flex">
          <a href="#about" class="hover:text-indigo-300">About</a>
          <a href="#team" class="hover:text-indigo-300">Team</a>
          <a href="#mission" class="hover:text-indigo-300">Mission</a>
        </nav>
      </div>
    </header>

    <!-- ABOUT Section -->
    <section id="about" class="py-16 text-center">
      <h1 class="text-4xl font-bold mb-4">Meet the Team</h1>
      <p class="max-w-xl mx-auto text-gray-300">
        Scroll down to discover our crew — like treasures on a map.
      </p>
    </section>

    <!-- Initial Row -->
    <section id="team-start" class="py-10 flex justify-center gap-6">
      <div class="team-card">Alex</div>
      <div class="team-card">Jamie</div>
      <div class="team-card">Taylor</div>
      <div class="team-card">Jordan</div>
      <div class="team-card">Morgan</div>
    </section>

    <!-- Drop Reveal Team Zone -->
    <section id="team" class="relative min-h-[1200px]">
      <svg
        id="connection-svg"
        class="absolute top-0 left-0 w-full h-full pointer-events-none"
      ></svg>
    </section>

    <!-- SCRIPT -->
    <script>
      const members = [
        {
          name: "Alex Carter",
          role: "CEO & Founder",
          img: "https://i.pravatar.cc/150?img=3",
        },
        {
          name: "Jamie Lee",
          role: "Lead Designer",
          img: "https://i.pravatar.cc/150?img=5",
        },
        {
          name: "Taylor Brooks",
          role: "Developer",
          img: "https://i.pravatar.cc/150?img=7",
        },
        {
          name: "Jordan Smith",
          role: "Marketing Lead",
          img: "https://i.pravatar.cc/150?img=9",
        },
        {
          name: "Morgan Lee",
          role: "UI/UX Designer",
          img: "https://i.pravatar.cc/150?img=11",
        },
      ];

      let dropIndex = 0;
      let started = false;
      const startRow = document.getElementById("team-start");
      const dropZone = document.getElementById("team");
      const svg = document.getElementById("connection-svg");

      window.addEventListener("scroll", () => {
        const triggerPoint = dropZone.offsetTop - window.innerHeight / 2;

        if (window.scrollY > triggerPoint && !started) {
          started = true;
          startRow.style.display = "none";
        }

        if (started && dropIndex < members.length) {
          const nextTrigger = triggerPoint + dropIndex * 250;
          if (window.scrollY > nextTrigger) {
            dropCard(members[dropIndex], dropIndex);
            dropIndex++;
          }
        }
      });

      function dropCard(member, index) {
        const side = index % 2 === 0 ? "left" : "right";
        const cardWidth = 280;
        const xPadding = 80;
        const xPos =
          side === "left" ? xPadding : window.innerWidth - cardWidth - xPadding;
        const yPos = index * 220 + 50;

        const card = document.createElement("div");
        card.className = "drop-card";
        card.style.left = `${xPos}px`;
        card.style.top = `${yPos}px`;
        card.innerHTML = `
    <div class="p-4">
      <img src="${member.img}" class="w-20 h-20 rounded-full mx-auto mb-3">
      <h3 class="text-lg font-semibold text-center">${member.name}</h3>
      <p class="text-indigo-300 text-center">${member.role}</p>
    </div>
  `;
        dropZone.appendChild(card);

        setTimeout(() => {
          card.classList.add("show");
          setTimeout(() => card.classList.add("expanded"), 900);
        }, 50);

        // Draw connection line
        if (index > 0) {
          const prevSide = (index - 1) % 2 === 0 ? "left" : "right";
          const prevX =
            prevSide === "left"
              ? xPadding + cardWidth / 2
              : window.innerWidth - xPadding - cardWidth / 2;
          const prevY = (index - 1) * 220 + 50 + 90;

          const currX = xPos + cardWidth / 2;
          const currY = yPos;

          const path = document.createElementNS(
            "http://www.w3.org/2000/svg",
            "path"
          );
          const d = `M${prevX},${prevY} C${prevX},${prevY + 50} ${currX},${
            currY - 50
          } ${currX},${currY}`;
          path.setAttribute("d", d);
          path.setAttribute("class", "connection-line");
          svg.appendChild(path);

          setTimeout(() => path.classList.add("show"), 400);
        }
      }
    </script>
  </body>
</html>

<!--- Second version -->

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>TailSpark - Team Reveal</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      body {
        background: #0f172a;
        color: white;
        margin: 0;
        font-family: "Inter", sans-serif;
      }

      header {
        background: #1e293b;
        position: sticky;
        top: 0;
        z-index: 50;
      }
      header a {
        color: #818cf8;
        font-weight: 600;
        text-decoration: none;
      }
      header a:hover {
        color: #a5b4fc;
      }

      #team-start {
        padding: 40px 0;
        display: flex;
        justify-content: center;
        gap: 24px;
      }
      .team-card {
        width: 120px;
        height: 120px;
        background: #1e293b;
        border-radius: 1rem;
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: 600;
        font-size: 1.1rem;
        box-shadow: 0 6px 14px rgba(0, 0, 0, 0.4);
        user-select: none;
        cursor: default;
        transition: transform 0.3s ease;
      }

      /* Drop cards start small, invisible */
      .drop-card {
        position: absolute;
        width: 500px;
        height: 240px;
        background: #1e293b;
        border-radius: 1rem;
        box-shadow: 0 6px 14px rgba(0, 0, 0, 0.4);
        color: white;
        font-family: "Inter", sans-serif;
        opacity: 0;
        transform-origin: center top;
        /* start scaled down and translated up */
        transform: translateY(-150px) scale(0.6);
        overflow: hidden;
        /* Lock size and border-radius — no width/height transitions */
      }

      /* Animate drop with bounce */
      .drop-card.show {
        animation: waterDrop 1.1s cubic-bezier(0.23, 1, 0.32, 1) forwards;
      }

      /* No expansion transition — card is full size at drop */
      /* We'll use subtle scale up on hover if wanted */
      .drop-card:hover {
        transform: scale(1.05);
        transition: transform 0.3s ease;
        z-index: 10;
        box-shadow: 0 10px 20px rgba(99, 102, 241, 0.8);
      }

      @keyframes waterDrop {
        0% {
          opacity: 0;
          transform: translateY(-150px) scale(0.6);
        }
        50% {
          opacity: 1;
          transform: translateY(20px) scale(1.05);
        }
        70% {
          transform: translateY(-10px) scale(0.98);
        }
        85% {
          transform: translateY(4px) scale(1.02);
        }
        100% {
          opacity: 1;
          transform: translateY(0) scale(1);
        }
      }

      .connection-line {
        stroke: #94a3b8;
        stroke-width: 3;
        stroke-dasharray: 5, 8;
        fill: none;
        opacity: 0;
      }
      .connection-line.show {
        animation: drawLine 0.6s linear forwards;
      }
      @keyframes drawLine {
        from {
          stroke-dashoffset: 200;
          opacity: 1;
        }
        to {
          stroke-dashoffset: 0;
          opacity: 1;
        }
      }

      /* Content inside drop cards */
      .drop-card > div {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding: 1.25rem;
        height: 100%;
        box-sizing: border-box;
      }
      .drop-card .profile {
        display: flex;
        gap: 1.25rem;
        align-items: center;
      }
      .drop-card img {
        width: 96px;
        height: 96px;
        border-radius: 9999px;
        flex-shrink: 0;
        object-fit: cover;
        box-shadow: 0 0 12px #6366f1aa;
      }
      .drop-card h3 {
        font-size: 1.5rem;
        font-weight: 700;
        margin: 0;
      }
      .drop-card p.role {
        color: #818cf8;
        margin: 0.25rem 0 0.75rem 0;
        font-weight: 600;
      }
      .drop-card p.bio {
        color: #cbd5e1;
        font-size: 0.9rem;
        line-height: 1.3;
        margin: 0;
      }

      /* Responsive tweaks */
      @media (max-width: 600px) {
        .drop-card {
          width: 90vw !important;
          height: auto !important;
        }
        .drop-card > div {
          flex-direction: column;
          align-items: center;
          text-align: center;
        }
        .drop-card .profile {
          justify-content: center;
        }
        .drop-card img {
          width: 72px;
          height: 72px;
        }
      }
    </style>
  </head>
  <body>
    <!-- NAVBAR -->
    <header class="bg-slate-900 sticky top-0 z-50">
      <div
        class="container mx-auto flex items-center justify-between py-4 px-6"
      >
        <a href="#" class="text-2xl font-bold text-indigo-400">TailSpark</a>
        <nav class="space-x-6 hidden md:flex">
          <a href="#about" class="hover:text-indigo-300">About</a>
          <a href="#team" class="hover:text-indigo-300">Team</a>
          <a href="#mission" class="hover:text-indigo-300">Mission</a>
        </nav>
      </div>
    </header>

    <!-- About Section -->
    <section id="about" class="py-16 text-center">
      <h1 class="text-4xl font-bold mb-4">Meet the Team</h1>
      <p class="max-w-xl mx-auto text-gray-300">
        Scroll down to discover our crew — like treasures on a map.
      </p>
    </section>

    <!-- Initial Row -->
    <section id="team-start" class="py-10 flex justify-center gap-6">
      <div class="team-card">Alex</div>
      <div class="team-card">Jamie</div>
      <div class="team-card">Taylor</div>
      <div class="team-card">Jordan</div>
      <div class="team-card">Morgan</div>
    </section>

    <!-- Drop Zone -->
    <section id="team" class="relative min-h-[1400px]">
      <svg
        id="connection-svg"
        class="absolute top-0 left-0 w-full h-full pointer-events-none"
      ></svg>
    </section>

    <script>
      const members = [
        {
          name: "Alex Carter",
          role: "CEO & Founder",
          img: "https://i.pravatar.cc/150?img=3",
          bio: "Visionary leader driving strategy and innovation. Passionate about building teams and products that matter.",
        },
        {
          name: "Jamie Lee",
          role: "Lead Designer",
          img: "https://i.pravatar.cc/150?img=5",
          bio: "Design thinker with a love for clean interfaces. Brings user empathy and aesthetic harmony to every project.",
        },
        {
          name: "Taylor Brooks",
          role: "Developer",
          img: "https://i.pravatar.cc/150?img=7",
          bio: "Code wizard with a knack for turning ideas into scalable apps. Loves clean architecture and dark coffee.",
        },
        {
          name: "Jordan Smith",
          role: "Marketing Lead",
          img: "https://i.pravatar.cc/150?img=9",
          bio: "Marketing strategist crafting compelling campaigns. Believes in storytelling backed by data.",
        },
        {
          name: "Morgan Lee",
          role: "UI/UX Designer",
          img: "https://i.pravatar.cc/150?img=11",
          bio: "UX researcher and interface artist. Designs experiences that feel effortless and intuitive.",
        },
      ];

      let dropIndex = 0;
      let started = false;
      const dropZone = document.getElementById("team");
      const svg = document.getElementById("connection-svg");

      window.addEventListener("scroll", () => {
        const triggerPoint = dropZone.offsetTop - window.innerHeight / 2;

        if (window.scrollY > triggerPoint && !started) {
          started = true;
          document.getElementById("team-start").style.display = "none";
        }

        if (started && dropIndex < members.length) {
          const nextTrigger = triggerPoint + dropIndex * 280;
          if (window.scrollY > nextTrigger) {
            dropCard(members[dropIndex], dropIndex);
            dropIndex++;
          }
        }
      });

      function dropCard(member, index) {
        const cardWidth = 500;
        const cardHeight = 240;
        const xPadding = 80;
        const side = index % 2 === 0 ? "left" : "right";
        const xPos =
          side === "left" ? xPadding : window.innerWidth - cardWidth - xPadding;
        const yPos = index * 300 + 60;

        // Prevent duplicate cards if user scrolls fast
        if (document.querySelector(`.drop-card[data-index="${index}"]`)) return;

        const card = document.createElement("div");
        card.className = "drop-card";
        card.style.left = `${xPos}px`;
        card.style.top = `${yPos}px`;
        card.setAttribute("data-index", index);
        card.innerHTML = `
        <div>
          <div class="profile">
            <img src="${member.img}" alt="${member.name}" />
            <div>
              <h3>${member.name}</h3>
              <p class="role">${member.role}</p>
            </div>
          </div>
          <p class="bio">${member.bio}</p>
        </div>
      `;
        dropZone.appendChild(card);

        // Start drop animation after slight delay to ensure append
        setTimeout(() => {
          card.classList.add("show");
        }, 50);

        // Connection Line
        if (index > 0) {
          const prevSide = (index - 1) % 2 === 0 ? "left" : "right";
          const prevX =
            prevSide === "left"
              ? xPadding + cardWidth / 2
              : window.innerWidth - xPadding - cardWidth / 2;
          const prevY = (index - 1) * 300 + 60 + cardHeight / 2;

          const currX = xPos + cardWidth / 2;
          const currY = yPos;

          const path = document.createElementNS(
            "http://www.w3.org/2000/svg",
            "path"
          );
          const d = `M${prevX},${prevY} C${prevX},${prevY + 50} ${currX},${
            currY - 50
          } ${currX},${currY}`;
          path.setAttribute("d", d);
          path.setAttribute("class", "connection-line");
          svg.appendChild(path);

          setTimeout(() => path.classList.add("show"), 500);
        }
      }
    </script>
  </body>
</html>

<!--- Third Version Satisfied version part 1-->

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>TailSpark - Team Reveal Improved</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      body {
        background: #0f172a;
        color: white;
        margin: 0;
        font-family: "Inter", sans-serif;
      }
      header {
        background: #1e293b;
        position: sticky;
        top: 0;
        z-index: 50;
      }
      header a {
        color: #818cf8;
        font-weight: 600;
        text-decoration: none;
      }
      header a:hover {
        color: #a5b4fc;
      }

      /* Initial Row */
      #team-start {
        padding: 50px 0;
        display: flex;
        justify-content: center;
        gap: 32px;
      }
      .team-card {
        width: 180px;
        height: 180px;
        background: linear-gradient(135deg, #4f46e5, #6366f1);
        border-radius: 1.5rem;
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: 700;
        font-size: 1.4rem;
        box-shadow: 0 10px 25px rgba(99, 102, 241, 0.6);
        user-select: none;
        cursor: default;
        color: white;
        transition: transform 0.3s ease;
      }
      .team-card:hover {
        transform: scale(1.05);
        box-shadow: 0 15px 30px rgba(99, 102, 241, 0.8);
      }

      /* Drop cards */
      .drop-card {
        position: absolute;
        width: 520px;
        min-height: 260px;
        background: linear-gradient(135deg, #1e293b, #273449);
        border-radius: 1.5rem;
        box-shadow: 0 10px 30px rgba(50, 55, 100, 0.7);
        color: white;
        font-family: "Inter", sans-serif;
        opacity: 0;
        transform-origin: center top;
        transform: translateY(-160px) scale(0.6);
        overflow: hidden;
        cursor: pointer;
        transition: box-shadow 0.3s ease;
        /* Animate transform & opacity only */
        will-change: transform, opacity;
      }
      .drop-card.show {
        animation: waterDrop 1.1s cubic-bezier(0.23, 1, 0.32, 1) forwards;
      }
      .drop-card.expanded > .content {
        opacity: 1;
        transform: translateX(0);
        transition: opacity 0.6s ease 0.15s, transform 0.6s ease 0.15s;
      }

      /* Content inside drop cards */
      .drop-card > div.content {
        padding: 1.5rem 2rem;
        height: 100%;
        box-sizing: border-box;
        opacity: 0;
        transform: translateX(40px);
        display: flex;
        flex-direction: column;
        gap: 1.25rem;
        transition: opacity 0.6s ease, transform 0.6s ease;
      }
      .drop-card .profile {
        display: flex;
        gap: 1.5rem;
        align-items: center;
      }
      .drop-card img {
        width: 104px;
        height: 104px;
        border-radius: 9999px;
        flex-shrink: 0;
        object-fit: cover;
        box-shadow: 0 0 18px #6366f1cc;
        border: 3px solid #6366f1;
        background: white;
      }
      .drop-card h3 {
        font-size: 1.8rem;
        font-weight: 700;
        margin: 0;
        color: #eef2ff;
        text-shadow: 0 0 8px #6366f1;
      }
      .drop-card p.role {
        color: #a5b4fc;
        margin: 0.3rem 0 1rem 0;
        font-weight: 600;
        font-size: 1.1rem;
        font-style: italic;
        text-shadow: 0 0 6px #7c3aed88;
      }
      .drop-card p.bio {
        color: #cbd5e1;
        font-size: 1rem;
        line-height: 1.4;
        margin: 0;
        max-width: 420px;
        text-shadow: 0 0 2px #1e293b;
      }
      .drop-card:hover {
        transform: scale(1.07);
        transition: transform 0.3s ease;
        z-index: 20;
        box-shadow: 0 15px 40px rgba(99, 102, 241, 0.9);
      }

      /* Connection lines */
      svg {
        overflow: visible;
        pointer-events: none;
      }
      .connection-line {
        stroke: #94a3b8;
        stroke-width: 3;
        stroke-dasharray: 200;
        stroke-dashoffset: 200; /* hide initially */
        fill: none;
        opacity: 1;
        transition: opacity 0.3s ease;
        filter: drop-shadow(0 0 3px #a5b4fcaa);
      }

      /* Keyframes */
      @keyframes waterDrop {
        0% {
          transform: translateY(-160px) scale(0.6);
          opacity: 0;
        }
        60% {
          transform: translateY(20px) scale(1.1);
          opacity: 1;
        }
        80% {
          transform: translateY(-10px) scale(0.95);
        }
        100% {
          transform: translateY(0) scale(1);
          opacity: 1;
        }
      }

      /* Responsive tweaks */
      @media (max-width: 650px) {
        .drop-card {
          width: 90vw !important;
          min-height: auto !important;
          left: 5% !important; /* Override to center in mobile */
          right: auto !important;
        }
        .drop-card > div.content {
          flex-direction: column;
          align-items: center;
          text-align: center;
        }
        .drop-card .profile {
          justify-content: center;
        }
        .drop-card img {
          width: 80px;
          height: 80px;
        }
      }
    </style>
  </head>
  <body>
    <!-- NAVBAR -->
    <header class="bg-slate-900 sticky top-0 z-50">
      <div
        class="container mx-auto flex items-center justify-between py-4 px-6"
      >
        <a href="#" class="text-2xl font-bold text-indigo-400">TailSpark</a>
        <nav class="space-x-6 hidden md:flex">
          <a href="#about" class="hover:text-indigo-300">About</a>
          <a href="#team" class="hover:text-indigo-300">Team</a>
          <a href="#mission" class="hover:text-indigo-300">Mission</a>
        </nav>
      </div>
    </header>

    <!-- About Section -->
    <section id="about" class="py-16 text-center">
      <h1 class="text-4xl font-bold mb-4">Meet the Team</h1>
      <p class="max-w-xl mx-auto text-gray-300">
        Scroll down to discover our crew — like treasures on a map.
      </p>
    </section>

    <!-- Initial Row -->
    <section id="team-start" class="py-10 flex justify-center gap-8">
      <div class="team-card">Alex</div>
      <div class="team-card">Jamie</div>
      <div class="team-card">Taylor</div>
      <div class="team-card">Jordan</div>
      <div class="team-card">Morgan</div>
    </section>

    <!-- Drop Zone -->
    <section id="team" class="relative min-h-[1500px]">
      <svg
        id="connection-svg"
        class="absolute top-0 left-0 w-full h-full pointer-events-none"
      ></svg>
    </section>

    <script>
      const members = [
        {
          name: "Alex Carter",
          role: "CEO & Founder",
          img: "https://i.pravatar.cc/150?img=3",
          bio: "Visionary leader and founder with over 15 years of experience in tech innovation and startup growth.",
        },
        {
          name: "Jamie Lee",
          role: "Lead Designer",
          img: "https://i.pravatar.cc/150?img=5",
          bio: "Creative mastermind behind the brand’s look and feel, passionate about user-centric design.",
        },
        {
          name: "Taylor Brooks",
          role: "Developer",
          img: "https://i.pravatar.cc/150?img=7",
          bio: "Full-stack developer who crafts scalable and robust web applications with elegant code.",
        },
        {
          name: "Jordan Smith",
          role: "Marketing Lead",
          img: "https://i.pravatar.cc/150?img=9",
          bio: "Strategist focused on growing audience engagement and brand awareness through innovative campaigns.",
        },
        {
          name: "Morgan Lee",
          role: "UI/UX Designer",
          img: "https://i.pravatar.cc/150?img=11",
          bio: "Passionate about creating seamless user experiences with intuitive interfaces.",
        },
      ];

      const startRow = document.getElementById("team-start");
      const dropZone = document.getElementById("team");
      const svg = document.getElementById("connection-svg");

      let started = false;
      let dropIndex = 0;
      const dropCards = [];
      const connectionLines = [];

      const cardWidth = 520;
      const cardHeight = 260;
      const verticalSpacing = 280;
      const sideMargin = 80;

      // Hide initial row and start drops on scroll
      window.addEventListener("scroll", () => {
        const triggerPoint = dropZone.offsetTop - window.innerHeight / 2;

        if (!started && window.scrollY > triggerPoint) {
          started = true;
          startRow.style.display = "none";
        }

        if (started && dropIndex < members.length) {
          const nextTrigger = triggerPoint + dropIndex * verticalSpacing * 0.7;
          if (window.scrollY > nextTrigger) {
            dropCard(members[dropIndex], dropIndex);
            dropIndex++;
          }
        }

        updateLineDrawing();
      });

      function dropCard(member, index) {
        // Determine side (left/right)
        const side = index % 2 === 0 ? "left" : "right";
        // x position depends on side
        const xPos =
          side === "left"
            ? sideMargin
            : window.innerWidth - cardWidth - sideMargin;
        // y position grows with index
        const yPos = index * verticalSpacing + 50;

        // Create card element
        const card = document.createElement("div");
        card.className = "drop-card";
        card.style.left = `${xPos}px`;
        card.style.top = `${yPos}px`;
        card.dataset.index = index;

        card.innerHTML = `
        <div class="content">
          <div class="profile">
            <img src="${member.img}" alt="${member.name}" />
            <div>
              <h3>${member.name}</h3>
              <p class="role">${member.role}</p>
            </div>
          </div>
          <p class="bio">${member.bio}</p>
        </div>
      `;

        dropZone.appendChild(card);
        dropCards[index] = card;

        // Animate drop with bounce
        setTimeout(() => {
          card.classList.add("show");
          // Expand content after drop animation
          setTimeout(() => {
            card.classList.add("expanded");
          }, 1100);
        }, 50);

        // Create connection line if not the first card
        if (index > 0) {
          const prevCard = dropCards[index - 1];
          if (!prevCard) return;

          // Use getBoundingClientRect for precise positioning relative to viewport + scroll offset
          const prevRect = prevCard.getBoundingClientRect();
          const currRect = card.getBoundingClientRect();

          // Calculate line start (bottom center of previous card, relative to svg container)
          const svgRect = svg.getBoundingClientRect();
          const prevX = prevRect.left + prevRect.width / 2 - svgRect.left;
          const prevY = prevRect.top + prevRect.height - svgRect.top;

          // Calculate line end (top center of current card)
          const currX = currRect.left + currRect.width / 2 - svgRect.left;
          const currY = currRect.top - svgRect.top;

          // Create cubic bezier path for smooth curve
          const controlYOffset = 80;
          const d = `M${prevX},${prevY} C${prevX},${
            prevY + controlYOffset
          } ${currX},${currY - controlYOffset} ${currX},${currY}`;

          const path = document.createElementNS(
            "http://www.w3.org/2000/svg",
            "path"
          );
          path.setAttribute("d", d);
          path.classList.add("connection-line");
          path.style.strokeDashoffset = path.getTotalLength(); // Hide initially

          svg.appendChild(path);
          connectionLines.push({
            path,
            length: path.getTotalLength(),
            startY: prevY + svgRect.top,
            endY: currY + svgRect.top,
          });
        }
      }

      function updateLineDrawing() {
        if (!connectionLines.length) return;

        const scrollY = window.scrollY;
        const windowHeight = window.innerHeight;

        connectionLines.forEach(({ path, length, startY, endY }) => {
          // Animate line drawing between startY-windowHeight and endY-100
          const startScroll = startY - windowHeight + 100;
          const endScroll = endY - 100;

          let progress = (scrollY - startScroll) / (endScroll - startScroll);
          progress = Math.min(Math.max(progress, 0), 1);

          path.style.strokeDashoffset = length * (1 - progress);
        });
      }

      // Initial check on load in case user reloads scrolled
      window.addEventListener("load", () => {
        if (window.scrollY > dropZone.offsetTop - window.innerHeight / 2) {
          started = true;
          startRow.style.display = "none";
        }
        updateLineDrawing();
      });
    </script>
  </body>
</html>
